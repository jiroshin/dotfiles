[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  let NERDTreeShowHidden=1
	nnoremap <silent><C-a> :NERDTreeFind<CR>:vertical res 30<CR>
'''

# ウィンドウの幅をctr+eで調整
[[plugins]]
repo = 'simeji/winresizer'

# インデント
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
	let g:indent_guides_enable_on_vim_startup = 1
	let g:indent_guides_exclude_filetypes = ['help', 'nerdtree']
	let g:indent_guides_auto_colors = 0
	autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd ctermbg=237
	autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=240
'''

# コメントアウト
[[plugins]]
repo = 'tomtom/tcomment_vim'
hook_add = '''
	vnoremap ? :'<,'>TComment<CR>
'''

# airline
[[plugins]]
repo = 'vim-airline/vim-airline'
[[plugins]]
repo = 'vim-airline/vim-airline-themes'
depends = 'vim-airline'
hook_add = '''
	let g:airline_theme = 'onedark'
	if !exists('g:airline_symbols')
		let g:airline_symbols = {}
	endif
	let g:airline_left_sep = '»'
	let g:airline_left_sep = '▶'
	let g:airline_right_sep = '«'
	let g:airline_right_sep = '◀'
	let g:airline_symbols.crypt = '🔒'
	let g:airline_symbols.linenr = '☰'
	let g:airline_symbols.linenr = '␊'
	let g:airline_symbols.linenr = '␤'
	let g:airline_symbols.linenr = '¶'
	let g:airline_symbols.maxlinenr = ''
	let g:airline_symbols.maxlinenr = '㏑'
	let g:airline_symbols.branch = '⎇'
	let g:airline_symbols.paste = 'ρ'
	let g:airline_symbols.paste = 'Þ'
	let g:airline_symbols.paste = '∥'
	let g:airline_symbols.spell = 'Ꞩ'
	let g:airline_symbols.notexists = 'Ɇ'
	let g:airline_symbols.whitespace = 'Ξ'
	let g:airline_left_sep = ''
	let g:airline_left_alt_sep = ''
	let g:airline_right_sep = ''
	let g:airline_right_alt_sep = ''
	let g:airline_symbols.branch = ''
	let g:airline_symbols.readonly = ''
	let g:airline_symbols.linenr = '☰'
	let g:airline_symbols.maxlinenr = ''
	let g:airline_left_sep = '⮀'
	let g:airline_left_alt_sep = '⮁'
	let g:airline_right_sep = '⮂'
	let g:airline_right_alt_sep = '⮃'
	let g:airline_symbols.branch = '⭠'
	let g:airline_symbols.readonly = '⭤'
	let g:airline_symbols.linenr = '⭡'
	let g:airline#extensions#tabline#enabled = 1
	let g:airline#extensions#tabline#buffer_idx_mode = 1
	let g:airline#extensions#tabline#fnamemod = ':t'
'''

# gitのHEADとの差分を表示
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
	set signcolumn=yes
	let g:gitgutter_async = 1
	let g:gitgutter_sign_modified = 'rw'
	highlight GitGutterAdd ctermfg=green
	highlight GitGutterChange ctermfg=yellow
	highlight GitGutterDelete ctermfg=red
	highlight GitGutterChangeDelete ctermfg=yellow
'''

# fzf
[[plugins]]
repo = 'junegunn/fzf'
hook_post_update = './install --all'
merged = 0

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = '''
	command! -bang -nargs=* Rg
	\ call fzf#vim#grep(
	\ 'rg --column --line-number --hidden --ignore-case --no-heading --color=always '.shellescape(<q-args>), 1,
	\ <bang>0 ? fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'up:60%')
	\ : fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'right:50%:hidden', '?'),
	\ <bang>0)
	nnoremap <C-g> :Rg<Space>
	nnoremap <C-p> :GFiles<CR>
'''

# 括弧のレインボーハイライト
[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
	let g:rainbow_active = 1
'''

# linters
[[plugins]]
repo = 'dense-analysis/ale'
hook_add = '''
	let g:ale_set_highlights = 0
  let g:ale_lint_on_enter=1
  let g:ale_lint_on_save=1
  let g:ale_lint_on_text_changed=0
  let g:ale_sign_column_always=1
  let g:ale_linters = {
    \ 'bash': ['shellcheck'],
    \ 'css': ['stylelint', 'prettier'],
    \ 'dockerfile': ['hadolint'],
    \ 'erb': ['erb'],
    \ 'go': [],
    \ 'graphql': ['eslint'],
    \ 'html': ['HTMLHint'],
    \ 'haml': ['haml-lint'],
    \ 'javascript': ['eslint'],
    \ 'json': ['jq'],
    \ 'make': ['checkmake'],
    \ 'markdown': ['prettier', 'textlint'],
    \ 'python': ['pylint'],
    \ 'ruby': ['rubocop', 'solargraph'],
    \ 'rust': ['cargo', 'rustfmt'],
    \ 'sass': ['sass-lint'],
    \ 'scss': ['sass-lint'],
    \ 'SQL': ['sqlint', 'sqlfmt'],
    \ 'swift': ['swiftlint'],
    \ 'typescript': ['eslint'],
    \ 'vim': ['vint'],
    \ 'yaml': ['yamllint'],
    \ }
  let g:ale_sign_error='E'
  let g:ale_sign_warning='W'
  let g:ale_echo_msg_error_str='E'
  let g:ale_echo_msg_warning_str='W'
  let g:ale_echo_msg_format='[%linter%] %s (%severity%)'
  let g:ale_statusline_format=['E %d', 'W %d', '']
  let g:ale_open_list=1
  let g:ale_set_loclist=0
  let g:ale_set_quickfix=0 " NOT use QuickFix
  let g:ale_keep_list_window_open=0
  let g:ale_javascript_prettier_use_local_config=1
  let g:ale_go_langserver_executable = 'gopls'
'''

# lsp -----------------------------------------------------
# completionでなんかエラー発生するのでコメントアウト
# inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
build = '''
  git checkout release
'''
hook_add = '''
  inoremap <silent><expr> <TAB>
		\ pumvisible() ? "\<C-n>" :
		\ <SID>check_back_space() ? "\<TAB>" :
		\ coc#refresh()
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
  inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
  function! s:check_back_space() abort
	let col = col('.') - 1
	return !col || getline('.')[col - 1]  =~# '\s'
  endfunction
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)
'''
# ---------------------------------------------------------
